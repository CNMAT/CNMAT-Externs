# makefile.per-object
# This is included in the makefile for every Max external
# Matt Wright, 2005

# Name of the object is the name of this directory
OBJ := $(shell basename `pwd`)

# Need a better way to do this!
PLATFORM = OSX

# Filenames derived from the name of the object
SOURCE = $(OBJ).c
REZ_FILE = $(OBJ).r
HELPFILE = $(OBJ).help
BUILD_DIR = ../build-mac
MAC_BINARY = $(BUILD_DIR)/$(OBJ)
MAC_DEBUGGER_SYM = $(BUILD_DIR)/$(OBJ).xSYM
MAC_HELPFILE_COPY = $(BUILD_DIR)/$(OBJ).help 
MAC_INDIVIDUAL_DOWNLOAD_NO_DIR = $(OBJ)$(VERSION_TAG).sit
MAC_INDIVIDUAL_DOWNLOAD = $(BUILD_DIR)/$(MAC_INDIVIDUAL_DOWNLOAD_NO_DIR)
# OBJ_INFO is info about the object
OBJ_INFO_NO_DIR = $(OBJ)-$(PLATFORM)-objinfo.txt
OBJ_INFO = $(BUILD_DIR)/$(OBJ_INFO_NO_DIR)
# WEB_INFO is exactly the same, but also with the md5 checksum
WEB_INFO_NO_DIR = $(OBJ)-$(PLATFORM)-info.txt
WEB_INFO = $(BUILD_DIR)/$(WEB_INFO_NO_DIR)
WEB_INCOMING = $(BUILD_DIR)/$(OBJ)-$(PLATFORM).tar.gz

# Where files live on our web server
# WEBSERVER_BASE_DIR = /Volumes/webroot$$/MAX
WEBSERVER_BASE_DIR = /tmp
WEBSERVER_INCOMING_DIR = $(WEBSERVER_BASE_DIR)/incoming

# Making the version number accessible from this Makefile:

# Each version.h file has a line that looks like this:  
#     #define VERSION "1.2.3.4"
# so get a Makefile variable that's just something like "1.2.3.4"
DOUBLEQUOTED_VERSION := $(word 3,$(shell grep '\#define VERSION ' version.h))
# now a cheesy way to get rid of the double quotes:
VERSION = $(shell echo $(DOUBLEQUOTED_VERSION))
VERSION_TAG = _$(VERSION)

# Ditto for status
DOUBLEQUOTED_STATUS := $(word 3,$(shell grep STATUS version.h))
STATUS = $(shell echo $(DOUBLEQUOTED_STATUS))



# Top-level build targets

all: mac-binary help-diff-warning

.PHONY: clean
clean:
	rm -f $(MAC_INDIVIDUAL_DOWNLOAD) $(MAC_HELPFILE_COPY) $(MAC_BINARY) 
	rm -f $(WEB_INFO) $(OBJ_INFO) version.h $(WEB_INCOMING) $(MAC_DEBUGGER_SYM)


# The version info is now extracted from the .c file by Andy's perl script:
# because some makefile variables (e.g., VERSION_TAG) come from version.h,
# start over with a recursive call to $(MAKE)
version.h: $(OBJ_INFO)
	perl ../../../info2header.pl < $(OBJ_INFO) > $@
	$(MAKE) $(MAKECMDGOALS)


.PHONY: web-info
web-info: $(WEB_INFO)

$(OBJ_INFO): $(SOURCE)
	perl ../../../commentkeys.pl < $(SOURCE) > $@
	echo 'PLATFORM: "$(PLATFORM)"' >> $@
	echo 'BUILDER: "'`whoami`'"' >> $@
	echo 'BUILD_DATE: "'`date`'"' >> $@
	echo 'BUILD_DIR: "'`pwd`'"' >> $@

$(WEB_INFO): $(MAC_INDIVIDUAL_DOWNLOAD) $(OBJ_INFO)
	cp $(OBJ_INFO) $(WEB_INFO)
	echo MD5: `md5 $(MAC_INDIVIDUAL_DOWNLOAD)| cut -f 4 -d ' '` >> $(WEB_INFO)


.PHONY: mac-binary
mac-binary: $(MAC_BINARY)

# to make the MAC binary, have to open the Codewarrior project.
# The call to cmp is to force this call to Make to stop, so the 
# programmer has to say "make" again.
$(MAC_BINARY): $(SOURCE) $(REZ_FILE) version.h
	@echo 'Please build the MAC version of' $(OBJ) 
	open $(OBJ).mcp 
	@echo 'Ignore the following error message; just run make again after'
	@echo 'CodeWarrior builds the object.'
	@cmp -s version.h /dev/null


START_OVER_ERROR = $(error Please run make again.)
.PHONY: start-over
start-over: ; $(START_OVER_ERROR)


.PHONY: mac-individual-download
mac-individual-download: $(MAC_INDIVIDUAL_DOWNLOAD)

$(MAC_INDIVIDUAL_DOWNLOAD): $(HELPFILE) $(MAC_BINARY)
	stuff -o -n $(MAC_INDIVIDUAL_DOWNLOAD) $(MAC_BINARY) $(HELPFILE)



# Put a copy of the help file next to the Mac binary; maybe not necessary
$(MAC_HELPFILE_COPY): $(OBJ).help
	cp $(OBJ).help $(MAC_HELPFILE_COPY)


# make sure help patch in correct source directory is the most recent
# (even though it's the one in $(BUILD_DIR) that's usually edited.)

.PHONY: help-diff-warning
help-diff-warning: $(MAC_HELPFILE_COPY)
	@ cmp -s $(OBJ).help $(MAC_HELPFILE_COPY) || \
	echo WARNING\! '$(MAC_HELPFILE_COPY) is different from $(OBJ).help'


# Actually copying the files to directories where the web server can find them

.PHONY: web-release
web-release: $(WEBSERVER_BASE_DIR) $(WEB_INCOMING)
	cp $(WEB_INCOMING) $(WEBSERVER_INCOMING_DIR)

$(WEB_INCOMING): $(MAC_INDIVIDUAL_DOWNLOAD) $(WEB_INFO)
	tar cvfz $(WEB_INCOMING) -C $(BUILD_DIR) $(MAC_INDIVIDUAL_DOWNLOAD_NO_DIR) $(WEB_INFO_NO_DIR)

$(WEBSERVER_BASE_DIR):
	@echo Please mount the webroot$$ volume from Bach





# Diagnostic stuff for debugging

printenv:
	printenv

tellversiontag:
	echo $(VERSION_TAG)

webtest: $(WEBSERVER_BASE_DIR)
	open $(WEBSERVER_BASE_DIR)

statustest: version.h
	echo $(STATUS)