# makefile.per-object
# This is included in the makefile for every Max external
# Matt Wright, 2005-2006

# default platform is "UNKNOWN"
PLATFORM = UNKNOWN

# Now figure out the platform based on what the build target is
cfm: PLATFORM := OSX-CFM
cfm-release: PLATFORM := OSX-CFM
macho: PLATFORM = OSX-MachO
macho-release: PLATFORM = OSX-MachO
cfm: PLATFORM := OSX-CFM
cfm-release: PLATFORM := OSX-CFM
win: PLATFORM = WIN
win-release: PLATFORM = WIN


# Name of the object is the name of this directory
OBJ := $(shell basename `pwd`)

# Filenames derived from the name of the object
SOURCE = $(OBJ).c
REZ_FILE = $(OBJ).r
HELPFILE = $(OBJ).help
MAC_BINARY = $(if $(findstring OSX-CFM,$(PLATFORM)), \
   $(BUILD_DIR)/$(OBJ), $(BUILD_DIR)/$(OBJ).mxo)
MAC_DEBUGGER_SYM = $(BUILD_DIR)/$(OBJ).xSYM
MAC_HELPFILE_COPY = $(BUILD_DIR)/$(OBJ).help 
MAC_INDIVIDUAL_DOWNLOAD_NO_DIR = $(OBJ)$(VERSION_TAG).sit
MAC_INDIVIDUAL_DOWNLOAD = $(BUILD_DIR)/$(MAC_INDIVIDUAL_DOWNLOAD_NO_DIR)

CODEWARRIOR_BUILD_DIR = ../build-mac
XCODE_BUILD_DIR = build/Deployment
DEFAULT_BUILD_DIR = /tmp

# Variables derived from the platform
ifeq ($(PLATFORM), OSX-CFM)
  BUILD_DIR = $(CODEWARRIOR_BUILD_DIR)
else 
ifeq ($(PLATFORM), OSX-MachO)
  BUILD_DIR = $(XCODE_BUILD_DIR)
else 
ifeq ($(PLATFORM), UNKNOWN)
  BUILD_DIR = $(DEFAULT_BUILD_DIR)
else
  BUILD_DIR = $(error Unrecognized platform "$(PLATFORM)")
endif
endif
endif

BUILD_DIR_EXISTS = $(BUILD_DIR)/exists
# OBJ_INFO is info about the object
OBJ_INFO_NO_DIR = $(OBJ)-$(PLATFORM)-objinfo.txt
OBJ_INFO = $(BUILD_DIR)/$(OBJ_INFO_NO_DIR)
# WEB_INFO is exactly the same, but also with the md5 checksum
WEB_INFO_NO_DIR = $(OBJ)-$(PLATFORM)-info.txt
WEB_INFO = $(BUILD_DIR)/$(WEB_INFO_NO_DIR)
WEB_INCOMING = $(BUILD_DIR)/$(OBJ)-$(PLATFORM).tar.gz

# Where files live on our web server
WEBSERVER_INCOMING_DIR = cnmat.berkeley.edu:/Users/andy/MAX-incoming


# Making the version number accessible from this Makefile:
#
# Each version.h file has a line that looks like this:  
#     #define VERSION "1.2.3.4"
# so get a Makefile variable that's just something like "1.2.3.4"
DOUBLEQUOTED_VERSION := $(word 3,$(shell grep '\#define VERSION ' version.h))
# now a cheesy way to get rid of the double quotes:
VERSION = $(shell echo $(DOUBLEQUOTED_VERSION))
VERSION_TAG = _$(VERSION)

# Ditto for status
DOUBLEQUOTED_STATUS := $(word 3,$(shell grep STATUS version.h))
STATUS = $(shell echo $(DOUBLEQUOTED_STATUS))



# Top-level build targets


test: 
	echo platform $(PLATFORM)
#	echo binary $(MAC_BINARY)
#	echo build $(BUILD_DIR)


all: mac-individual-download help-diff-warning mac-binary

.PHONY: clean
clean:
	rm -f $(MAC_INDIVIDUAL_DOWNLOAD) $(MAC_HELPFILE_COPY) $(MAC_BINARY) 
	rm -f $(WEB_INFO) $(OBJ_INFO) version.h $(WEB_INCOMING) $(MAC_DEBUGGER_SYM)
	rm -f *~


# The version info is now extracted from the .c file by Andy's perl script:
# because some makefile variables (e.g., VERSION_TAG) come from version.h,
# start over with a recursive call to $(MAKE)
version.h: $(OBJ_INFO)
	perl ../../../info2header.pl < $(OBJ_INFO) > $@
	$(MAKE) $(MAKECMDGOALS)


.PHONY: web-info
web-info: $(WEB_INFO)

$(BUILD_DIR_EXISTS):
	mkdir -p $(BUILD_DIR)
	touch $(BUILD_DIR_EXISTS)

$(OBJ_INFO): $(SOURCE) $(BUILD_DIR_EXISTS)
	perl ../../../commentkeys.pl < $(SOURCE) > $@
	echo 'PLATFORM: "$(PLATFORM)"' >> $@
	echo 'BUILDER: "'`whoami`'"' >> $@
	echo 'BUILD_DATE: "'`date`'"' >> $@
	echo 'BUILD_DIR: "'`pwd`'"' >> $@
#	echo 'SVN_REVISION: "'`svn info *.c | grep "^Revision: " | awk '{print $$2}'`'"' >> $@
# SVN_REVISION keyword is now handled by SVN "keywords"

$(WEB_INFO): $(MAC_INDIVIDUAL_DOWNLOAD) $(OBJ_INFO)
	cp $(OBJ_INFO) $(WEB_INFO)
	echo MD5: `md5 $(MAC_INDIVIDUAL_DOWNLOAD)| cut -f 4 -d ' '` >> $(WEB_INFO)


.PHONY: mac-binary
mac-binary: $(MAC_BINARY)

# to make the MAC binary, have to open the Codewarrior project.
# The call to cmp is to force this call to Make to stop, so the 
# programmer has to say "make" again.
# We first rename the MAC binary because CodeWarrior will sometimes "build" a "new"
# binary (even making the slamming sound) by doing nothing, resulting in the binary
# file still having an older date than the source file.
$(MAC_BINARY): $(SOURCE) $(REZ_FILE) version.h
	@touch $(MAC_BINARY)  # so there will be something to move
	@mv -f $(MAC_BINARY) $(MAC_BINARY).backup
	@echo 'Please build the MAC version of' $(OBJ) 
	open $(OBJ).mcp 
	@echo 'Ignore the following error message; just run make again after'
	@echo 'CodeWarrior builds the object.'
	@cmp -s version.h /dev/null


START_OVER_ERROR = $(error Please run make again.)
.PHONY: start-over
start-over: ; $(START_OVER_ERROR)


.PHONY: mac-individual-download
mac-individual-download: $(MAC_INDIVIDUAL_DOWNLOAD)

$(MAC_INDIVIDUAL_DOWNLOAD): $(HELPFILE) $(MAC_BINARY)
	stuff -o -n $(MAC_INDIVIDUAL_DOWNLOAD) $(MAC_BINARY) $(HELPFILE)



# Put a copy of the help file next to the Mac binary; maybe not necessary
$(MAC_HELPFILE_COPY): $(OBJ).help
	cp $(OBJ).help $(MAC_HELPFILE_COPY)


# make sure help patch in correct source directory is the most recent
# (even though it's the one in $(BUILD_DIR) that's usually edited.)

.PHONY: help-diff-warning
help-diff-warning: $(MAC_HELPFILE_COPY)
	@ cmp -s $(OBJ).help $(MAC_HELPFILE_COPY) || \
	echo WARNING\! '$(MAC_HELPFILE_COPY) is different from $(OBJ).help'


# Actually copying the files to directories where the web server can find them

.PHONY: web-release
web-release: $(WEB_INCOMING) code-checked-in
	scp $(WEB_INCOMING) $(WEBSERVER_INCOMING_DIR)

$(WEB_INCOMING): code-checked-in $(MAC_INDIVIDUAL_DOWNLOAD) $(WEB_INFO) 
	tar cvfz $(WEB_INCOMING) -C $(BUILD_DIR) $(MAC_INDIVIDUAL_DOWNLOAD_NO_DIR) $(WEB_INFO_NO_DIR)

# Ensuring that the current code has been properly checked into Subversion
.PHONY: code-checked-in
code-checked-in:
	@ !((svn status | grep "^M") && (echo You have modified files that have not been checked back into SVN\!))

# Explanation of above:  Grep returns status 0 if the text was found (i.e., if there are un-checked-in files.
# So (svn status | grep "^M") && (echo ...)  prints the error only if the text was found.
# Echo always returns 0, so the return value of the && operator is 0 if an error was printed, 1 otherwise,
# so I put a logical negation (exclamation point) before the whole thing, so that Make will bomb out
# if the error is printed.



# Diagnostic stuff for debugging

printenv:
	printenv

tellversiontag:
	echo $(VERSION_TAG)

webtest: $(WEBSERVER_BASE_DIR)
	open $(WEBSERVER_BASE_DIR)

statustest: version.h
	echo $(STATUS)

ostest:
	echo $(OS)
