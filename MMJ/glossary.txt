Application: A a general use fully addressable MMJ (Max MSP Jitter) patch.  Apps might edit or reformat data, provide composer or audio engineering assistance, as well as operate on or perform digital sound in a specified way.  Apps are suggested when a composer or researcher desires to share an activity that has become habitual to the point where a fixed environment can exist.
Baseline: The painstakingly selected package that we expect all users to have in their Max path and that all other software may depend onDemo: patch that shows one (impressive) idea, not necessarily with enough flexibility or generality to be useful for extended work (Desired reaction: “Wow!”).  It is specifically formatted for digital projection, and quick, reliable show and tell sessions.Dependency: when any patch requires a specific form of supportHelp patch: shows how one object (patch/external/etc.) worksModule: Generalized patch, to be used in an application, demo, tutor, or tutorial   Object: General term meaning either patch or external written in C, Java, or JavascriptPackage: specific, organized subset of the repository that serves some purposePatch (aka “abstraction”): any unit of software made in MaxRepertoire: is an App, but  it is a special class called repertoire because it is branded by a composer.  Repertoire is intended for performance (concert, installation, internet, CD) and involves a special intent (to form one musical world or specific piece).  For example, several Modules, and several Apps might be born of David Wessel's Migrator world, but David Wessel's Migrator world is Repertoire (i.e. it belongs and is identified with the composer or responsible group).  Matt's Wacom world consists of many potential modules, but the Repertoire aspect is his particular use of these elements to generate pieces/performances.    Most Repertoire will be in-house release only.

Repository: versioned storage of “all” CNMAT's software and related content.Support: an object that somehow supports your work, or a directory of sameTool: A vague term we try to avoid when being precise. “What software isn’t a tool?”Tutor: is a MMJ patch reference document that serves as a single collection point for the expanding communal wisdom on a particular MMJ object or programming topic.  For an advanced user it is a mnemonic aid and for entry level users it is learning space.  An example might be the coll-tutor.pat   Here you would find all kinds of tips of dealing with collections including elaborate strategies like David Wessel's Refer world.  My preference is that Tutors be formatted for digital projection.  (Old: A very small tutorial about one specific thing, e.g., a thorough explanation of MSP’s “DSP Status” window.)Tutorial: series of patches explaining and contextualizing a package for teaching purposes, e.g., CNMAT’s Spectral Tutorials. (Desired reaction: “I understand.”)

Working Copy: A copy of a subset of the repository where a user can inspect, run, and modify files, and eventually check new and improved versions back into the repository.