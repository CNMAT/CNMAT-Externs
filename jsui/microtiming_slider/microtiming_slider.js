/*prototype slider for Matt's rhythm controller*/inlets = 1;outlets = 1;sketch.default2d();var shownames = 0;var newex = 0;//slider objectfunction slider (n, o, s, r, g, b, a, x, g){	this.name = n;	this.offset = o;	this.stroke = s;	this.red = r;	this.green = g;	this.blue = b;	this.alpha = a;	this.x = x;	this.grav = g;	}//prototype slider with draw methodnew slider ("zero", 0., "x", 1., 1., 1., 1., 0., 0.);slider.prototype.draw = drawslide;//starter slidervar all_sliders = new Array();all_sliders[0] = new slider ("zero", 0., "1", 0., 0., 1., 1., 0., 0.);all_sliders[1] = new slider ("one", 0., "e", 0., 0., 1., 1., 0., 0.);all_sliders[2] = new slider ("two", 0., "+", 0., 0., 1., 1., 0., 0.);all_sliders[3] = new slider ("three", 0., "a", 0., 0., 1., 1., 0., 0.);//initial drawingclear();for (i = 0 ; i < all_sliders.length ; i ++)	all_sliders[i].draw();refresh();function clear(){	with (sketch) 	{		glclearcolor(1., 1., 1.);		glclear();	}}function drawslide(){	with (sketch) 	{		this.x = .9*(all_sliders.length*(i/all_sliders.length))-1.5;		moveto (this.x, 0.);		glcolor (this.red, this.green, this.blue, this.alpha);		frameellipse (this.offset, .9, 90., 270.);		glcolor (this.red, this.green, this.blue, (.5*this.alpha));		ellipse (this.offset, .9, 90., 270.);		glcolor (this.red, this.green, this.blue, this.alpha);		frameellipse (this.offset, .9, 90., 270.);		moveto ((this.x+(-1*this.offset)), 0.);		framecircle (.1)		glcolor (1., 1., 1., 1.)		circle (.09)		glcolor (this.red, this.green, this.blue, this.alpha);		text (this.stroke)		if (shownames == 1)		{			textalign("center","center");			fontsize(myfontsize);					moveto (this.x, this.y);			sketch.text (this.name);		}			}}function bang(){	clear();	for (i = 0 ; i < all_sliders.length ; i ++)		all_sliders[i].draw();	refresh();}function sethand(x){	worldx = sketch.screentoworld(x,y)[0];//add the correct gravities to the slider objects		for (i = 0 ; i < all_sliders.length ; i ++)		{		all_sliders[i].grav = Math.abs(worldx-all_sliders[i].x);		}	//find the smallest one (centers then diameters)		grav = 999.		for (i = 0 ; i < all_sliders.length ; i ++)		{			if (all_sliders[i].grav <  grav)			{				hand = i;				outlet(0, hand);				grav = all_sliders[i].grav;			}		}}function onclick(x,y,but,cmd,shift,capslock,option,ctrl){	worldx = sketch.screentoworld(x,y)[0];//add the correct gravities to the slider objects		for (i = 0 ; i < all_sliders.length ; i ++)		{		all_sliders[i].grav = Math.abs(worldx-all_sliders[i].x);		}	//find the smallest one (centers then diameters)		grav = 999.		for (i = 0 ; i < all_sliders.length ; i ++)		{			if (all_sliders[i].grav <  grav)			{				hand = i;				outlet(0, hand);				grav = all_sliders[i].grav;			}		}}onclick.local = 1; //privatefunction ondrag (x,y,but,cmd,shift,capslock,option,ctrl){	worldx = sketch.screentoworld(x,y)[0]; 	worldy = sketch.screentoworld(x,y)[1];	all_sliders[hand].offset = (all_sliders[hand].x - worldx);	if (Math.abs(all_sliders[hand].offset > .5))	{			sethand(worldx);	}	outlet(0, hand, all_sliders[hand].offset);	bang();}ondrag.local = 1;  //private