Design principles:Not "res-filter", because it doesn't change the positions of the elements(unless you change the size of a cluster)(because resonators~ resonances have state variables, and if you keep the numberingconsistent then the right thing happens as you slowly move each resonator's parameters.)Don't change the number of resonancesfiltering happens at the end (except for clusters)(NB user can cascade two res-transform objects, put the clusters in the upper oneand put the filtering in the lower one.)All messages take one argument (e.g., separate freq-minn and freq-max instead of 2-arg freq-range)All messages have minus-sign-free aliases (e.g., "frequencyspread" vs. "frequency-spread")Filtering versus editing...?Things to document:output gainThe efficient way to reduce the size of a model is to set individual resonators' output gain to zeroNew design has three objects:1) res-transform always retains index numbers2) res-remover spectral-thinner throws away resonances (or sinusoids) that fall outside givenbounds (e.g., amplitude <= 0, frequency limiting...).NB: plugging this into resonantors~ and changing the numbers of things while processingaudio will probably make things blow up3) Clusters as their own completely independent thing.Another design alternative:Split all the features out into separate externalsWith SDIF-buffers so you don't have to re-copy the model between each transform, like the old softcast addvoice